package dylan.kwon.vote_contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.0.
 */
@SuppressWarnings("rawtypes")
public class VoteContract extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_CLOSEVOTE = "closeVote";

    public static final String FUNC_CREATEVOTE = "createVote";

    public static final String FUNC_HANDLEORACLEFULFILLMENT = "handleOracleFulfillment";

    public static final String FUNC_SETCLOSEVOTESOURCE = "setCloseVoteSource";

    public static final String FUNC_SETCREATEVOTESOURCE = "setCreateVoteSource";

    public static final String FUNC_SETDBNAME = "setDbName";

    public static final String FUNC_SETGASLIMIT = "setGasLimit";

    public static final String FUNC_SETNETWORK = "setNetwork";

    public static final String FUNC_SETSECRETSURLS = "setSecretsUrls";

    public static final String FUNC_SETSUBSCRIPTIONID = "setSubscriptionId";

    public static final String FUNC_VOTING = "voting";

    public static final String FUNC_DBNAME = "dbName";

    public static final String FUNC_DONID = "donId";

    public static final String FUNC_GASLIMIT = "gasLimit";

    public static final String FUNC_GETVOTEBALLOTITEMS = "getVoteBallotItems";

    public static final String FUNC_LASTREQUESTID = "lastRequestId";

    public static final String FUNC_LATESTVOTEID = "latestVoteId";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ROUTER = "router";

    public static final String FUNC_SECRETSURLS = "secretsUrls";

    public static final String FUNC_SUBSCRIPTIONID = "subscriptionId";

    public static final String FUNC_VOTECOUNT = "voteCount";

    public static final String FUNC_VOTES = "votes";

    public static final Event CHAINLINKRESPONSE_EVENT = new Event("ChainLinkResponse", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTFULFILLED_EVENT = new Event("RequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event REQUESTSENT_EVENT = new Event("RequestSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    @Deprecated
    protected VoteContract(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VoteContract(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VoteContract(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VoteContract(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> closeVote(BigInteger id) {
        final Function function = new Function(
                FUNC_CLOSEVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createVote(String title, String content,
            String imageUrl, Boolean isAllowDuplicateVoting, List<BallotItem> ballotItems) {
        final Function function = new Function(
                FUNC_CREATEVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title), 
                new org.web3j.abi.datatypes.Utf8String(content), 
                new org.web3j.abi.datatypes.Utf8String(imageUrl), 
                new org.web3j.abi.datatypes.Bool(isAllowDuplicateVoting), 
                new org.web3j.abi.datatypes.DynamicArray<BallotItem>(BallotItem.class, ballotItems)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOracleFulfillment(byte[] requestId,
            byte[] response, byte[] err) {
        final Function function = new Function(
                FUNC_HANDLEORACLEFULFILLMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId), 
                new org.web3j.abi.datatypes.DynamicBytes(response), 
                new org.web3j.abi.datatypes.DynamicBytes(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ChainLinkResponseEventResponse> getChainLinkResponseEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHAINLINKRESPONSE_EVENT, transactionReceipt);
        ArrayList<ChainLinkResponseEventResponse> responses = new ArrayList<ChainLinkResponseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChainLinkResponseEventResponse typedResponse = new ChainLinkResponseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.response = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChainLinkResponseEventResponse getChainLinkResponseEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHAINLINKRESPONSE_EVENT, log);
        ChainLinkResponseEventResponse typedResponse = new ChainLinkResponseEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.response = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.err = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ChainLinkResponseEventResponse> chainLinkResponseEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChainLinkResponseEventFromLog(log));
    }

    public Flowable<ChainLinkResponseEventResponse> chainLinkResponseEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHAINLINKRESPONSE_EVENT));
        return chainLinkResponseEventFlowable(filter);
    }

    public static List<RequestFulfilledEventResponse> getRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RequestFulfilledEventResponse> responses = new ArrayList<RequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestFulfilledEventResponse getRequestFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTFULFILLED_EVENT, log);
        RequestFulfilledEventResponse typedResponse = new RequestFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestFulfilledEventFromLog(log));
    }

    public Flowable<RequestFulfilledEventResponse> requestFulfilledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTFULFILLED_EVENT));
        return requestFulfilledEventFlowable(filter);
    }

    public static List<RequestSentEventResponse> getRequestSentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, transactionReceipt);
        ArrayList<RequestSentEventResponse> responses = new ArrayList<RequestSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSentEventResponse typedResponse = new RequestSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestSentEventResponse getRequestSentEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSENT_EVENT, log);
        RequestSentEventResponse typedResponse = new RequestSentEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestSentEventFromLog(log));
    }

    public Flowable<RequestSentEventResponse> requestSentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSENT_EVENT));
        return requestSentEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> setCloseVoteSource(String source) {
        final Function function = new Function(
                FUNC_SETCLOSEVOTESOURCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(source)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCreateVoteSource(String source) {
        final Function function = new Function(
                FUNC_SETCREATEVOTESOURCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(source)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDbName(String _dbName) {
        final Function function = new Function(
                FUNC_SETDBNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dbName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGasLimit(BigInteger _gasLimit) {
        final Function function = new Function(
                FUNC_SETGASLIMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_gasLimit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNetwork(String _router, byte[] _donId) {
        final Function function = new Function(
                FUNC_SETNETWORK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _router), 
                new org.web3j.abi.datatypes.generated.Bytes32(_donId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSecretsUrls(byte[] _secretsUrls) {
        final Function function = new Function(
                FUNC_SETSECRETSURLS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_secretsUrls)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubscriptionId(BigInteger _subscriptionId) {
        final Function function = new Function(
                FUNC_SETSUBSCRIPTIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(_subscriptionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> voting(BigInteger id, List<BigInteger> indexes) {
        final Function function = new Function(
                FUNC_VOTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(indexes, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> dbName() {
        final Function function = new Function(FUNC_DBNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> donId() {
        final Function function = new Function(FUNC_DONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> gasLimit() {
        final Function function = new Function(FUNC_GASLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getVoteBallotItems(BigInteger id) {
        final Function function = new Function(FUNC_GETVOTEBALLOTITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<BallotItem>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<byte[]> lastRequestId() {
        final Function function = new Function(FUNC_LASTREQUESTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> latestVoteId() {
        final Function function = new Function(FUNC_LATESTVOTEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> router() {
        final Function function = new Function(FUNC_ROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> secretsUrls() {
        final Function function = new Function(FUNC_SECRETSURLS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> subscriptionId() {
        final Function function = new Function(FUNC_SUBSCRIPTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> voteCount() {
        final Function function = new Function(FUNC_VOTECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, Boolean, BigInteger, Boolean>> votes(
            BigInteger param0) {
        final Function function = new Function(FUNC_VOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, Boolean, BigInteger, Boolean>>(function,
                new Callable<Tuple8<BigInteger, String, String, String, String, Boolean, BigInteger, Boolean>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, String, String, Boolean, BigInteger, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, String, String, Boolean, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static VoteContract load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new VoteContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VoteContract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VoteContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VoteContract load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new VoteContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VoteContract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VoteContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VoteContract> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _dbName, String router, byte[] donId,
            byte[] secretsUrls, BigInteger subscriptionId, BigInteger gasLimit,
            String createVoteSource, String closeVoteSource) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dbName), 
                new org.web3j.abi.datatypes.Address(160, router), 
                new org.web3j.abi.datatypes.generated.Bytes32(donId), 
                new org.web3j.abi.datatypes.DynamicBytes(secretsUrls), 
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId), 
                new org.web3j.abi.datatypes.generated.Uint32(gasLimit), 
                new org.web3j.abi.datatypes.Utf8String(createVoteSource), 
                new org.web3j.abi.datatypes.Utf8String(closeVoteSource)));
        return deployRemoteCall(VoteContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<VoteContract> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _dbName, String router, byte[] donId, byte[] secretsUrls,
            BigInteger subscriptionId, BigInteger gasLimit, String createVoteSource,
            String closeVoteSource) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dbName), 
                new org.web3j.abi.datatypes.Address(160, router), 
                new org.web3j.abi.datatypes.generated.Bytes32(donId), 
                new org.web3j.abi.datatypes.DynamicBytes(secretsUrls), 
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId), 
                new org.web3j.abi.datatypes.generated.Uint32(gasLimit), 
                new org.web3j.abi.datatypes.Utf8String(createVoteSource), 
                new org.web3j.abi.datatypes.Utf8String(closeVoteSource)));
        return deployRemoteCall(VoteContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<VoteContract> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _dbName, String router, byte[] donId,
            byte[] secretsUrls, BigInteger subscriptionId, BigInteger chainLinkGasLimit,
            String createVoteSource, String closeVoteSource) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dbName), 
                new org.web3j.abi.datatypes.Address(160, router), 
                new org.web3j.abi.datatypes.generated.Bytes32(donId), 
                new org.web3j.abi.datatypes.DynamicBytes(secretsUrls), 
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId), 
                new org.web3j.abi.datatypes.generated.Uint32(gasLimit), 
                new org.web3j.abi.datatypes.Utf8String(createVoteSource), 
                new org.web3j.abi.datatypes.Utf8String(closeVoteSource)));
        return deployRemoteCall(VoteContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<VoteContract> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _dbName, String router, byte[] donId, byte[] secretsUrls,
            BigInteger subscriptionId, BigInteger chainLinkGasLimit, String createVoteSource,
            String closeVoteSource) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dbName), 
                new org.web3j.abi.datatypes.Address(160, router), 
                new org.web3j.abi.datatypes.generated.Bytes32(donId), 
                new org.web3j.abi.datatypes.DynamicBytes(secretsUrls), 
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId), 
                new org.web3j.abi.datatypes.generated.Uint32(gasLimit), 
                new org.web3j.abi.datatypes.Utf8String(createVoteSource), 
                new org.web3j.abi.datatypes.Utf8String(closeVoteSource)));
        return deployRemoteCall(VoteContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class BallotItem extends DynamicStruct {
        public String name;

        public BigInteger count;

        public BallotItem(String name, BigInteger count) {
            super(new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(count));
            this.name = name;
            this.count = count;
        }

        public BallotItem(Utf8String name, Uint256 count) {
            super(name, count);
            this.name = name.getValue();
            this.count = count.getValue();
        }
    }

    public static class ChainLinkResponseEventResponse extends BaseEventResponse {
        public byte[] requestId;

        public String response;

        public String err;
    }

    public static class RequestFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class RequestSentEventResponse extends BaseEventResponse {
        public byte[] id;
    }
}
